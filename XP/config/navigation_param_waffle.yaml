Actuator:
  type: turtlebot3  # Actuator based on ROS
  reverse_heading: true
  device_radius: 0.2 # radius of the circumscribed circle of robot
  odom_topic: odom # topic published by robot
  diagnostics_topic: diagnostics # topic published by robot to diagnose battery.
  cmd_vel_topic: cmd_vel # topic to control the ros actuator
  lidar_obs_dist_thres: 0.7
  lidar_obs_angle_thres: 1.5708
  T_AL: # transformation matrix from actuator to see lidar
    - [0, -1, 0, 0]
    - [1, 0, 0, -0.1]
    - [0, 0, 1, 0]
    - [0, 0, 0, 1]

Lidar:
  type: ros
  serial_dev: /dev/ttyUSB0
  min_valid_scan_dist: 0.2  # the min effective range of lidar
  scan_topic: scan  # topic published by lidar
  diagnostics_topic: diagnostics  # topic published by robot to diagnose lidar.

Navigation:
  type: navi  # navi or robot or walk. (robot or walk are path follower based. To-be deprecated)
  use_trajectory_file: false  # use ${navigation_folder}/trajectory.txt to generate trajectory automatically
  use_global_occ_grid_prior: false  # use ${navigation_folder}/semantic_occupancy.png (if exists) as a priori occ grid in OA
  mode: control  # control or loop.
  T_AD:  # calibrate the transition and rotation of {D}evice in {A}ctuator coordinate.
    - [1, 0, 0, 0]
    - [0, 0, 1, 0]
    - [0, -1, 0, 1]
    - [0, 0, 0, 1]
  fuse_wheel_odom_pose: false # use fusion pose (slam & wheel odom) to improve localization
  wheel_odom_vel_feedback: false # use wheel odom velocity feedback to improve PD control
  base_velocity: 0.1 # meter per second.  Only used by simple controller (to-be deprecated)
  lost_recovery_timeout: 60 # timeout threshold in lost recovery status (s)
  enable_obstacle_avoid: true # enable the latest obstacles circumvent strategy
  grid_cell_size_x: 200 # local grid size in X dimension
  grid_cell_size_y: 200 # local grid size in Y dimension
  grid_resolution: 0.05 # local grid resolution (m)
  hierarchical_infalte: true # use multiple inflate radius: 1.2, 1.1, 1.0, 0.9 times of device radius
  safe_obstacle_distance: 0.3 # if the dist between device_radius and obstacle is less than the thresh, OA will be triggered (m)
  valid_obstacle_dist_range: 2.0 # use obstacles closer than this distance as input of navigation logic (m)
  valid_obstacle_angle_range: 1.309 # use obstacles in this horizontal angle range as input of navigation logic (rad)
  virtual_clear_range: 3.0 # Used to clear obstacles when no obstacle is detected on a ray
  road_width: 3.0 # the valid width of road for local path search in obstacles circumvent mode (m)
  control_frequency: 20  # the frequency to update and control actuator (hz)
  update_frequency: 20  # the frequency to update the navigator (hz)

Controller:
  type: PD  # Navigator only supports PD & RL for now
  track_distance: 0.4 # distance between current position and local target.
  target_distance_tolerance: 0.1 # distance error tolerance when reach target (m)
  target_direction_tolerance: 0.087 # direction error tolerance when reach target (rad)
  inter_sample_resolution: 0.01 # sample resolution between two local target candidates
  v_max: 0.6 # 0.4 max linear velocity (m/s)
  abs_w_max: 0.8 # max absolute value of angular velocity (rad/s)
  kp_v: 1.5 # 0.75 P param of linear velocity
  kp_w: 0.8 # 0.51 P param of angular velocity
  kp_acc_v: 0.5 # P param of linear acceleration
  kp_acc_v_stop: 0.25 # P param of linear acceleration in stop motion
  kp_acc_w: 0.5 # P param of angular acceleration
  velocity_multiplier: 1.0  # Multiplier for network velocity output
  angular_multiplier: 1.0  # Multiplier for network angular output
  robot_radius_multiplier: 2.0  # Radius as a multiplier of the original turtlebot radius
